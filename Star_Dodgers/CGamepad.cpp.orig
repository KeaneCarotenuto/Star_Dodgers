#include "CGamepad.h"
#include "CPrint.h"

CGamepad::CGamepad(int _gamepadIndex)
{
    m_GamepadIndex = _gamepadIndex;
    m_XInputEnabled = false;

    std::cout << (std::string)sf::Joystick::getIdentification(_gamepadIndex).name << ", [" << _gamepadIndex << "] connected." << std::endl;
}
sf::Vector2f CGamepad::GetLeftStick()
{
    float x = sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::LEFT_STICK_X : (sf::Joystick::Axis)DUALSHOCK::LEFT_STICK_X) / 100.f;
    float y = sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::LEFT_STICK_Y : (sf::Joystick::Axis)DUALSHOCK::LEFT_STICK_Y) / 100.f;
    if (std::abs(x) < 0.1f)
    {
        x = 0.0f;
    }
    if (std::abs(y) < 0.1f)
    {
        y = 0.0f;
    }

    return sf::Vector2f(x, y);
}
sf::Vector2f CGamepad::GetRightStick()
{
    float x = sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::RIGHT_STICK_X : (sf::Joystick::Axis)DUALSHOCK::RIGHT_STICK_X) / 100.f;
    float y = sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::RIGHT_STICK_Y : (sf::Joystick::Axis)DUALSHOCK::RIGHT_STICK_Y) / 100.f;
    if (std::abs(x) < 0.1f)
    {
        x = 0.0f;
    }
    if (std::abs(y) < 0.1f)
    {
        y = 0.0f;
    }
    return sf::Vector2f(x, y);
}
float CGamepad::GetLeftTrigger()
{
    return ((sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::LEFT_TRIGGER : (sf::Joystick::Axis)DUALSHOCK::LEFT_TRIGGER) / 100.f) + 1) / 2;
}
float CGamepad::GetRightTrigger()
{
    return ((sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::RIGHT_TRIGGER : (sf::Joystick::Axis)DUALSHOCK::RIGHT_TRIGGER) / 100.f) + 1) / 2;
}
bool CGamepad::GetButtonPressed(Button _button)
{
    return m_PressedThisFrame[(int)_button];
}

bool CGamepad::GetButtonDown(Button _button)
{
    switch (_button)
    {
    case Button::NORTH:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::NORTH_BUTTON : (int)DUALSHOCK::NORTH_BUTTON);
        break;
    case Button::SOUTH:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::SOUTH_BUTTON : (int)DUALSHOCK::SOUTH_BUTTON);
        break;
    case Button::EAST:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::EAST_BUTTON : (int)DUALSHOCK::EAST_BUTTON);
        break;
    case Button::WEST:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::WEST_BUTTON : (int)DUALSHOCK::WEST_BUTTON);
        break;
    case Button::LEFT_SHOULDER:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::LEFT_SHOULDER_BUTTON : (int)DUALSHOCK::LEFT_SHOULDER_BUTTON);
        break;
    case Button::RIGHT_SHOULDER:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::RIGHT_SHOULDER_BUTTON : (int)DUALSHOCK::RIGHT_SHOULDER_BUTTON);
        break;
    case Button::BACK:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::BACK_BUTTON : (int)DUALSHOCK::BACK_BUTTON);
        break;
    case Button::START:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::START_BUTTON : (int)DUALSHOCK::START_BUTTON);
        break;
    case Button::MIDDLE:
        return sf::Joystick::isButtonPressed(m_GamepadIndex, m_XInputEnabled ? (int)XINPUT::MIDDLE_BUTTON : (int)DUALSHOCK::MIDDLE_BUTTON);
        break;
    case Button::DPAD_UP:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::DPAD_Y : (sf::Joystick::Axis)DUALSHOCK::DPAD_Y) >= 100.f;
        break;
    case Button::DPAD_DOWN:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::DPAD_Y : (sf::Joystick::Axis)DUALSHOCK::DPAD_Y) <= -100.f;
        break;
    case Button::DPAD_LEFT:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::DPAD_X : (sf::Joystick::Axis)DUALSHOCK::DPAD_X) <= -100.f;
        break;
    case Button::DPAD_RIGHT:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::DPAD_X : (sf::Joystick::Axis)DUALSHOCK::DPAD_X) >= 100.f;
        break;
    case Button::TRIGGER_LEFT:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::LEFT_TRIGGER : (sf::Joystick::Axis)DUALSHOCK::LEFT_TRIGGER) > 0.0f;
        break;
    case Button::TRIGGER_RIGHT:
        return sf::Joystick::getAxisPosition(m_GamepadIndex, m_XInputEnabled ? (sf::Joystick::Axis)XINPUT::RIGHT_TRIGGER : (sf::Joystick::Axis)DUALSHOCK::RIGHT_TRIGGER) > 0.0f;
        break;

    default:
        return false;
        break;
    }
}
bool CGamepad::GetButtonReleased(Button _button)
{
    return m_ReleasedThisFrame[(int)_button];
}
void CGamepad::Bind(IGamepadInput *_objectToBind, std::string _name)
{
    m_Bindings.emplace(_name, _objectToBind);
}
void CGamepad::Unbind(std::string _name)
{
    m_toUnbind.push_back(_name);
    //m_Bindings.erase(_name);
}

void CGamepad::ToggleXInput()
{
    m_XInputEnabled = !m_XInputEnabled;
}
